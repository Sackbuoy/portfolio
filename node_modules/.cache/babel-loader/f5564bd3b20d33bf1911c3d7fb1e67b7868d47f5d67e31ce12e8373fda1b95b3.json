{"ast":null,"code":"var _jsxFileName = \"/home/sackbuoy/Dev/goofin/portfolio/src/components/Projects.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Projects = ({\n  config\n}) => {\n  _s();\n  // State for storing image data loaded from config\n  const [images, setImages] = useState([]);\n  // Track loading state\n  const [loading, setLoading] = useState(true);\n  // Track any error state\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Function to load image configuration\n    const loadImageConfig = async () => {\n      try {\n        // Fetch the config file (path relative to public folder)\n        const response = await fetch('/config/configuration.json');\n        if (!response.ok) {\n          throw new Error(`Failed to load configuration: ${response.status} ${response.statusText}`);\n        }\n\n        // Start loading all the images to get their dimensions\n        const imagePromises = config.images.map(imageConfig => {\n          return new Promise(resolve => {\n            const img = new Image();\n            img.onload = () => {\n              resolve({\n                ...imageConfig,\n                // Set the full path to the image\n                src: `/images/${imageConfig.filename}`,\n                // Record the natural dimensions\n                width: img.width,\n                height: img.height,\n                aspectRatio: img.width / img.height\n              });\n            };\n\n            // Handle loading errors\n            img.onerror = () => {\n              console.error(`Failed to load image: ${imageConfig.filename}`);\n              resolve({\n                ...imageConfig,\n                src: `/images/${imageConfig.filename}`,\n                width: 300,\n                height: 200,\n                aspectRatio: 1.5,\n                loadError: true\n              });\n            };\n\n            // Start loading the image\n            img.src = `/images/${imageConfig.filename}`;\n          });\n        });\n        const processedImages = await Promise.all(imagePromises);\n\n        // Sort images to optimize layout (optional)\n        const sortedImages = [...processedImages].sort((a, b) => {\n          // Sort by area (width Ã— height) in descending order\n          return b.width * b.height - a.width * a.height;\n        });\n        setImages(sortedImages);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error loading gallery configuration:', err);\n        setError(err instanceof Error ? err.message : String(err));\n        setLoading(false);\n      }\n    };\n    loadImageConfig();\n  }, []);\n\n  // If we have an error loading the config\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"projects\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Projects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Failed to load gallery: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please make sure the configuration file is accessible.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"projects\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading gallery...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dynamic-image-grid\",\n      children: images.map(image => {\n        // Calculate grid span based on aspect ratio and dimensions with scaling\n        const rowSpan = Math.max(1, Math.ceil(image.height / (50 * config.scaleFactor)));\n        const colSpan = Math.max(1, Math.ceil(image.width / (100 * config.scaleFactor)));\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-item\",\n          style: {\n            gridRow: `span ${rowSpan}`,\n            gridColumn: `span ${colSpan}`\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: image.src,\n              alt: image.title || 'Artwork',\n              loading: \"lazy\",\n              className: image.loadError ? 'image-error' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 19\n            }, this), image.title && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image-caption\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: image.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 23\n              }, this), image.description && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: image.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this)\n        }, image.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(Projects, \"IrokolCHfUdIuHik0hRB+6GzpFc=\");\n_c = Projects;\nexport default Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Projects","config","_s","images","setImages","loading","setLoading","error","setError","loadImageConfig","response","fetch","ok","Error","status","statusText","imagePromises","map","imageConfig","Promise","resolve","img","Image","onload","src","filename","width","height","aspectRatio","onerror","console","loadError","processedImages","all","sortedImages","sort","a","b","err","message","String","className","children","fileName","_jsxFileName","lineNumber","columnNumber","image","rowSpan","Math","max","ceil","scaleFactor","colSpan","style","gridRow","gridColumn","alt","title","description","id","_c","$RefreshReg$"],"sources":["/home/sackbuoy/Dev/goofin/portfolio/src/components/Projects.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ConfigData, ImageConfig } from '../config';\n\ninterface ProcessedImage extends ImageConfig {\n  src: string;\n  width: number;\n  height: number;\n  aspectRatio: number;\n  loadError?: boolean;\n}\n\nconst Projects = ({config}): React.ReactElement => {\n  // State for storing image data loaded from config\n  const [images, setImages] = useState<ProcessedImage[]>([]);\n  // Track loading state\n  const [loading, setLoading] = useState<boolean>(true);\n  // Track any error state\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Function to load image configuration\n    const loadImageConfig = async (): Promise<void> => {\n      try {\n        // Fetch the config file (path relative to public folder)\n        const response = await fetch('/config/configuration.json');\n        \n        if (!response.ok) {\n          throw new Error(`Failed to load configuration: ${response.status} ${response.statusText}`);\n        }\n        \n        // Start loading all the images to get their dimensions\n        const imagePromises = config.images.map((imageConfig: ImageConfig) => {\n          return new Promise<ProcessedImage>((resolve) => {\n            const img = new Image();\n            \n            img.onload = () => {\n              resolve({\n                ...imageConfig,\n                // Set the full path to the image\n                src: `/images/${imageConfig.filename}`,\n                // Record the natural dimensions\n                width: img.width,\n                height: img.height,\n                aspectRatio: img.width / img.height\n              });\n            };\n            \n            // Handle loading errors\n            img.onerror = () => {\n              console.error(`Failed to load image: ${imageConfig.filename}`);\n              resolve({\n                ...imageConfig,\n                src: `/images/${imageConfig.filename}`,\n                width: 300,\n                height: 200,\n                aspectRatio: 1.5,\n                loadError: true\n              });\n            };\n            \n            // Start loading the image\n            img.src = `/images/${imageConfig.filename}`;\n          });\n        });\n\n        const processedImages = await Promise.all(imagePromises);\n        \n        // Sort images to optimize layout (optional)\n        const sortedImages = [...processedImages].sort((a, b) => {\n          // Sort by area (width Ã— height) in descending order\n          return (b.width * b.height) - (a.width * a.height);\n        });\n        \n        setImages(sortedImages);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error loading gallery configuration:', err);\n        setError(err instanceof Error ? err.message : String(err));\n        setLoading(false);\n      }\n    };\n\n    loadImageConfig();\n  }, []);\n\n  // If we have an error loading the config\n  if (error) {\n    return (\n      <div className=\"projects\">\n        <h2>Projects</h2>\n        <div className=\"error-message\">\n          <p>Failed to load gallery: {error}</p>\n          <p>Please make sure the configuration file is accessible.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"projects\">\n      <h2>Projects</h2>\n      \n      {loading ? (\n        <div className=\"loading\">Loading gallery...</div>\n      ) : (\n        <div className=\"dynamic-image-grid\">\n          {images.map((image) => {\n            // Calculate grid span based on aspect ratio and dimensions with scaling\n            const rowSpan = Math.max(1, Math.ceil(image.height / (50 * config.scaleFactor)));\n            const colSpan = Math.max(1, Math.ceil(image.width / (100 * config.scaleFactor)));\n            \n            return (\n              <div \n                key={image.id} \n                className=\"image-item\"\n                style={{\n                  gridRow: `span ${rowSpan}`,\n                  gridColumn: `span ${colSpan}`\n                }}\n              >\n                <div className=\"image-content\">\n                  <img \n                    src={image.src} \n                    alt={image.title || 'Artwork'}\n                    loading=\"lazy\"\n                    className={image.loadError ? 'image-error' : ''}\n                  />\n                  {image.title && (\n                    <div className=\"image-caption\">\n                      <h3>{image.title}</h3>\n                      {image.description && <p>{image.description}</p>}\n                    </div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Projects;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWnD,MAAMC,QAAQ,GAAGA,CAAC;EAACC;AAAM,CAAC,KAAyB;EAAAC,EAAA;EACjD;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAmB,EAAE,CAAC;EAC1D;EACA,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAU,IAAI,CAAC;EACrD;EACA,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,eAAe,GAAG,MAAAA,CAAA,KAA2B;MACjD,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC;QAE1D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiCH,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,UAAU,EAAE,CAAC;QAC5F;;QAEA;QACA,MAAMC,aAAa,GAAGf,MAAM,CAACE,MAAM,CAACc,GAAG,CAAEC,WAAwB,IAAK;UACpE,OAAO,IAAIC,OAAO,CAAkBC,OAAO,IAAK;YAC9C,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;YAEvBD,GAAG,CAACE,MAAM,GAAG,MAAM;cACjBH,OAAO,CAAC;gBACN,GAAGF,WAAW;gBACd;gBACAM,GAAG,EAAE,WAAWN,WAAW,CAACO,QAAQ,EAAE;gBACtC;gBACAC,KAAK,EAAEL,GAAG,CAACK,KAAK;gBAChBC,MAAM,EAAEN,GAAG,CAACM,MAAM;gBAClBC,WAAW,EAAEP,GAAG,CAACK,KAAK,GAAGL,GAAG,CAACM;cAC/B,CAAC,CAAC;YACJ,CAAC;;YAED;YACAN,GAAG,CAACQ,OAAO,GAAG,MAAM;cAClBC,OAAO,CAACvB,KAAK,CAAC,yBAAyBW,WAAW,CAACO,QAAQ,EAAE,CAAC;cAC9DL,OAAO,CAAC;gBACN,GAAGF,WAAW;gBACdM,GAAG,EAAE,WAAWN,WAAW,CAACO,QAAQ,EAAE;gBACtCC,KAAK,EAAE,GAAG;gBACVC,MAAM,EAAE,GAAG;gBACXC,WAAW,EAAE,GAAG;gBAChBG,SAAS,EAAE;cACb,CAAC,CAAC;YACJ,CAAC;;YAED;YACAV,GAAG,CAACG,GAAG,GAAG,WAAWN,WAAW,CAACO,QAAQ,EAAE;UAC7C,CAAC,CAAC;QACJ,CAAC,CAAC;QAEF,MAAMO,eAAe,GAAG,MAAMb,OAAO,CAACc,GAAG,CAACjB,aAAa,CAAC;;QAExD;QACA,MAAMkB,YAAY,GAAG,CAAC,GAAGF,eAAe,CAAC,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACvD;UACA,OAAQA,CAAC,CAACX,KAAK,GAAGW,CAAC,CAACV,MAAM,GAAKS,CAAC,CAACV,KAAK,GAAGU,CAAC,CAACT,MAAO;QACpD,CAAC,CAAC;QAEFvB,SAAS,CAAC8B,YAAY,CAAC;QACvB5B,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOgC,GAAG,EAAE;QACZR,OAAO,CAACvB,KAAK,CAAC,sCAAsC,EAAE+B,GAAG,CAAC;QAC1D9B,QAAQ,CAAC8B,GAAG,YAAYzB,KAAK,GAAGyB,GAAG,CAACC,OAAO,GAAGC,MAAM,CAACF,GAAG,CAAC,CAAC;QAC1DhC,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIF,KAAK,EAAE;IACT,oBACER,OAAA;MAAK0C,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvB3C,OAAA;QAAA2C,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjB/C,OAAA;QAAK0C,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5B3C,OAAA;UAAA2C,QAAA,GAAG,0BAAwB,EAACnC,KAAK;QAAA;UAAAoC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtC/C,OAAA;UAAA2C,QAAA,EAAG;QAAsD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,oBACE/C,OAAA;IAAK0C,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvB3C,OAAA;MAAA2C,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEhBzC,OAAO,gBACNN,OAAA;MAAK0C,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gBAEjD/C,OAAA;MAAK0C,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAChCvC,MAAM,CAACc,GAAG,CAAE8B,KAAK,IAAK;QACrB;QACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,IAAI,CAACJ,KAAK,CAACpB,MAAM,IAAI,EAAE,GAAG1B,MAAM,CAACmD,WAAW,CAAC,CAAC,CAAC;QAChF,MAAMC,OAAO,GAAGJ,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,IAAI,CAACJ,KAAK,CAACrB,KAAK,IAAI,GAAG,GAAGzB,MAAM,CAACmD,WAAW,CAAC,CAAC,CAAC;QAEhF,oBACErD,OAAA;UAEE0C,SAAS,EAAC,YAAY;UACtBa,KAAK,EAAE;YACLC,OAAO,EAAE,QAAQP,OAAO,EAAE;YAC1BQ,UAAU,EAAE,QAAQH,OAAO;UAC7B,CAAE;UAAAX,QAAA,eAEF3C,OAAA;YAAK0C,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC5B3C,OAAA;cACEyB,GAAG,EAAEuB,KAAK,CAACvB,GAAI;cACfiC,GAAG,EAAEV,KAAK,CAACW,KAAK,IAAI,SAAU;cAC9BrD,OAAO,EAAC,MAAM;cACdoC,SAAS,EAAEM,KAAK,CAAChB,SAAS,GAAG,aAAa,GAAG;YAAG;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjD,CAAC,EACDC,KAAK,CAACW,KAAK,iBACV3D,OAAA;cAAK0C,SAAS,EAAC,eAAe;cAAAC,QAAA,gBAC5B3C,OAAA;gBAAA2C,QAAA,EAAKK,KAAK,CAACW;cAAK;gBAAAf,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,EACrBC,KAAK,CAACY,WAAW,iBAAI5D,OAAA;gBAAA2C,QAAA,EAAIK,KAAK,CAACY;cAAW;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7C,CACN;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE;QAAC,GApBDC,KAAK,CAACa,EAAE;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAqBV,CAAC;MAEV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC5C,EAAA,CAlIIF,QAAQ;AAAA6D,EAAA,GAAR7D,QAAQ;AAoId,eAAeA,QAAQ;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}