#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const webpack_1 = __importDefault(require("webpack"));
const memory_fs_1 = __importDefault(require("memory-fs"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const server_1 = require("./server");
const log_1 = require("./log");
const webpack_compiler_1 = require("./webpack-compiler");
exports.memFS = new memory_fs_1.default();
log_1.log('‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è\n');
log_1.gradientLog('‚ö°Ô∏è             Starting react-serve!               ‚ö°Ô∏è\n');
log_1.log('‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è ‚ö°Ô∏è\n');
let global_ServingDir;
commander_1.default
    .version('0.0.3')
    .arguments('<servingDir>')
    .option('-p, --port [number]', 'Specify port')
    .option('-e, --entry [entry]', 'Entry point for webpack')
    .option('-t, --typescript', 'Compile for TypeScript')
    .action(async (servingDir) => {
    global_ServingDir = servingDir;
    const port = commander_1.default.port || 8001;
    const ts = !!commander_1.default.typescript;
    const absoluteEntryPath = getAbsoluteEntryPath({ servingDir, program: commander_1.default });
    if (ts) {
        log_1.log('> Using a TypeScript webpack config');
        const tsconfigExists = hasTsconfig();
        if (!tsconfigExists) {
            logTsconfigError();
        }
    }
    log_1.log('> Looking for a webpack entry point...');
    const config = ts ?
        webpack_compiler_1.webpackConfigTypeScript({ dir: servingDir, absoluteEntryPath }) :
        webpack_compiler_1.webpackConfig({ dir: servingDir, absoluteEntryPath });
    log_1.successLog(`> > Using ${absoluteEntryPath}\n`);
    log_1.log(`> > Staring webpack!\n`);
    const compiler = webpack_1.default(config);
    compiler.outputFileSystem = exports.memFS;
    const stats = await webpack_compiler_1.webpackCompile(compiler);
    log_1.log(`${stats.toString()}\n`);
    if (webpackBuildHasErrors(stats)) {
        logCriticalErrors(stats);
        return;
    }
    log_1.successLog(`> > Build successful! \n`);
    log_1.log(`> Starting server! \n`);
    log_1.gradientLog(`------------------------------------------------------------------\n`);
    log_1.log(`The webpack bundle (/bundle.js) is served from an in memory file system.\n`);
    log_1.log(`Static files are served from ${process.cwd()}/${servingDir}\n`);
    log_1.gradientLog('------------------------------------------------------------------\n');
    server_1.startServer({ servingDir, port });
})
    .parse(process.argv);
if (noServingDirProvided()) {
    logNoServingDirError();
    process.exit(0);
}
function logTsconfigError() {
    log_1.errorLog(`No tsconfig.json exists at the root of your current working directory (cwd). While serve-react tries to be as "zero-config" as possible, we require a tsconfig.json at the moment. 
  
  üîß ---- HOW TO FIX ---- üîß
  Create a tsconfig.json at the root of your cwd and copy and paste the example config below to get started. Note you may need to tweak this config to fit your requirements.\n`);
    log_1.log(`tsconfig.json
---------------------------------------------
{
  "compilerOptions": {
    "module": "esnext",
    "moduleResolution": "node",
    "jsx": "react",
  }
}\n`);
}
function hasTsconfig() {
    return fs_1.default.existsSync(path_1.default.join(process.cwd(), 'tsconfig.json'));
}
function logNoServingDirError() {
    const message = `No serving directory specified!

serve-react needs know two things:

1) Serving directory. This is where your static assets are (index.html, styles.css, etc...).
   ex: serve-react static

2) Entry file for webpack. serve-react will look for an index.{js,tsx} file in the serving directory if no file is provided.
    ex: serve-react static -e src/index.js
`;
    log_1.errorLog(message);
}
function noServingDirProvided() {
    return global_ServingDir == undefined;
}
function logCriticalErrors(stats) {
    const { errors } = stats.compilation;
    const noModuleFoundError = filterToFirst(errors, error => error.name === 'EntryModuleNotFoundError');
    if (noEntryModuleFound(noModuleFoundError)) {
        log_1.errorLog(`${noModuleFoundError.error}\n\n`);
        log_1.errorLog(`‚òùÔ∏è ‚òùÔ∏è ‚òùÔ∏è This means serve-react couldn't find your entry point for webpack to compile. You tell us where the entry point is with an -e flag. If you don't provide one, we try to look for an index.{js,tsx} in your serving directory. Try something like this:\n`);
        log_1.log('serve-react static -e src/index.js\n');
    }
}
function noEntryModuleFound(noModuleFoundError) {
    return noModuleFoundError != undefined;
}
function getAbsoluteEntryPath({ program, servingDir }) {
    return typeof program.entry === 'string' ?
        path_1.default.join(process.cwd(), program.entry) :
        path_1.default.join(process.cwd(), servingDir, `index.${determineExtension(program)}`);
}
function determineExtension(program) {
    return typeof program.typescript === 'boolean' ? 'tsx' : 'js';
}
function webpackBuildHasErrors(stats) {
    return stats.compilation.errors.length > 0;
}
function filterToFirst(list, filterCallback) {
    return list.filter(filterCallback)[0];
}
